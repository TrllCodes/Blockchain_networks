class TransactionPool:
    def __init__(self):
        super(TransactionPool, self).__init__()
        # empty dictionary/array where the transaction values will be pooled.
        self.transaction_map = {}

    def set_transaction(self, transaction):
        """
        This TransactionPool class method sets a transaction into the transaction
        pool.
        - It stores the transactions within an array of key/value pairs, where
        the transaction IDs are the keys and the actual transaction objects are
        the values.
        """
        self.transaction_map[transaction.id] = transaction

    def existing_transaction(self, address):
        """
        This TransactionPool class method finds a transaction generated by the
        given address in the transaction pool.
        - It accomplishes this by iterating through all the transactions in a
        given transaction map. For any given transaction, the wallet address is
        stored in the input. So as soon as this method finds a transaction where
        the transaction object's input address matches the method's given address,
        it will return that specific transaction.
        - If no matching transaction is found, then this method returns a "None"
        value by default.
        """
        for transaction in self.transaction_map.values():
            if transaction.input['address'] == address:
                return transaction

    def transaction_data(self):
        """
        This TransactionPool class method returns the transactions of the
        transaction pool, represented in their json serialized form.
        """
        return list(map(
            lambda transaction: transaction.to_json(),
            self.transaction_map.values()
        ))

    def clear_blockchain_transactions(self, blockchain):
        """
        This TransactionPool class method deletes blockchain recorded transactions
        from the transaction pool.
        - It iterates through every transaction within the blockchain's data and
        deletes existing transactions. If the transaction doesn't exist, then it
        passes.
        """
        for block in blockchain.chain:
            for transaction in block.data:
                try:
                    del self.transaction_map[transaction['id']]
                except KeyError:
                    pass
